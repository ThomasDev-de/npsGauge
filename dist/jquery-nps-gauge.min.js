(function($){$.fn.npsGauge=function(nsp){if($(this).length>1){return $(this).each(function(i,e){return $(e).npsGauge(nsp)})}const $el=$(this);const value=$el.data("nps")||nsp||0;function createGaugeChart($element,nps){let canvasElement;if($element.is("canvas")){canvasElement=$element.get(0)}else{const canvas=$("<canvas>").appendTo($element);canvasElement=canvas.get(0)}const ctx=canvasElement.getContext("2d");const clampedNps=Math.max(-100,Math.min(100,nps));let progressColor;if(clampedNps<=0){progressColor="#ff4c4c"}else if(clampedNps<=70){progressColor="#ffd700"}else{progressColor="#4caf50"}const gaugeData={datasets:[{data:[0,100],backgroundColor:["#e0e0e0","#e0e0e0"],borderWidth:0}]};const gaugeOptions={rotation:-90,circumference:180,cutout:"70%",responsive:true,maintainAspectRatio:false,plugins:{tooltip:{enabled:false}}};let animationProgress=-100;const duration=1500;const startTime=performance.now();function animateNeedle(frameTime){const elapsed=frameTime-startTime;const progress=Math.min(elapsed/duration,1);animationProgress=-100+(clampedNps+100)*progress;let progressColor;if(animationProgress<=0){progressColor="#ff4c4c"}else if(animationProgress<=80){progressColor="#ffd700"}else{progressColor="#4caf50"}const progressPercent=(animationProgress+100)/200*100;gaugeData.datasets[0].data=[progressPercent,100-progressPercent];gaugeData.datasets[0].backgroundColor=[progressColor,"#e0e0e0"];if(canvasElement.chartInstance){canvasElement.chartInstance.update("none")}if(progress<1){requestAnimationFrame(animateNeedle)}}const customPlugin={id:"customPlugin",afterDraw(chart){const{width}=chart;const{height}=chart;const{ctx}=chart;const animatedPercent=(animationProgress+100)/200*Math.PI;const centerX=width/2;const centerY=height/1.3;const radius=width/2*.8;const needleTipX=centerX+radius*Math.cos(animatedPercent-Math.PI);const needleTipY=centerY+radius*Math.sin(animatedPercent-Math.PI);const baseLeftX=centerX+(radius-30)*Math.cos(animatedPercent-Math.PI-.1);const baseLeftY=centerY+(radius-30)*Math.sin(animatedPercent-Math.PI-.1);const baseRightX=centerX+(radius-30)*Math.cos(animatedPercent-Math.PI+.1);const baseRightY=centerY+(radius-30)*Math.sin(animatedPercent-Math.PI+.1);ctx.save();ctx.beginPath();ctx.moveTo(needleTipX,needleTipY);ctx.lineTo(baseLeftX,baseLeftY);ctx.lineTo(baseRightX,baseRightY);ctx.closePath();ctx.fillStyle="rgba(10, 10, 10, 1)";ctx.fill();ctx.restore();const text=`${Math.round(animationProgress)}`;ctx.save();ctx.font="20px Arial";ctx.fillStyle=progressColor;ctx.textAlign="center";ctx.textBaseline="middle";ctx.fillText(text,centerX,height/1.38);ctx.restore();drawScale(ctx,centerX,centerY,radius,40,0)}};if(canvasElement.chartInstance){canvasElement.chartInstance.destroy()}canvasElement.chartInstance=new Chart(ctx,{type:"doughnut",data:gaugeData,options:gaugeOptions,plugins:[customPlugin]});requestAnimationFrame(animateNeedle)}function drawScale(ctx,centerX,centerY,radius,cutoutPercent,scaleOffset=2){const cutoutRadius=radius*(cutoutPercent/100);const innerRadius=cutoutRadius+scaleOffset;const outerRadius=radius-scaleOffset;const shortOuterRadius=outerRadius-10;const maxLabelRadius=Math.min(centerX,centerY)-10;const labelRadius=Math.min(radius+30,maxLabelRadius);const startAngle=Math.PI;const endAngle=2*Math.PI;const majorStep=25;const minorStep=5;ctx.save();ctx.font="12px Arial";ctx.textAlign="center";ctx.textBaseline="middle";for(let i=-100;i<=100;i+=minorStep){const percent=(i+100)/200;const angle=startAngle+percent*(endAngle-startAngle);const xInner=centerX+innerRadius*Math.cos(angle);const yInner=centerY+innerRadius*Math.sin(angle);const xOuter=centerX+shortOuterRadius*Math.cos(angle);const yOuter=centerY+shortOuterRadius*Math.sin(angle);ctx.beginPath();ctx.moveTo(xInner,yInner);ctx.lineTo(xOuter,yOuter);ctx.strokeStyle="#666";ctx.lineWidth=1;ctx.stroke()}for(let i=-100;i<=100;i+=majorStep){const percent=(i+100)/200;const angle=startAngle+percent*(endAngle-startAngle);const xInner=centerX+innerRadius*Math.cos(angle);const yInner=centerY+innerRadius*Math.sin(angle);const xOuter=centerX+outerRadius*Math.cos(angle);const yOuter=centerY+outerRadius*Math.sin(angle);ctx.beginPath();ctx.moveTo(xInner,yInner);ctx.lineTo(xOuter,yOuter);ctx.strokeStyle="#666";ctx.lineWidth=1;ctx.stroke();const xLabel=centerX+labelRadius*Math.cos(angle);const yLabel=centerY+labelRadius*Math.sin(angle);ctx.fillStyle="#000";ctx.fillText(i.toString(),xLabel,yLabel)}ctx.restore()}createGaugeChart($el,value);return $el}})(jQuery);